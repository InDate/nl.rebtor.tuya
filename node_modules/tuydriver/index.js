'use strict';
var logging = false;

module.exports = {

// Decimal to Hex converter 
decimalToHex: function (d, padding) {
    var hex = Number(d).toString(16);
    padding = typeof (padding) === "undefined" || padding === null ? padding = 2 : padding;

    while (hex.length < padding) {
        hex = "0" + hex;
    }

    return hex;
	},

// Logging
devicelog: function (title, log) 
	{
	if(logging == true) 
		{ 
		console.log(title, log);
		}
	},

// processdata

processdata: function(device, data, type) 	
	{	
		// onoff devices

			// verwerk onoff
			if(data.dps.hasOwnProperty('1') == true && type == 'onoff') 
			{
				device.setCapabilityValue('onoff', data.dps['1'])
				.catch( err => {
				console.error(err);
				});
			}		
			
			// verwerk parameter 18 current
			if(data.dps.hasOwnProperty('18') == true && type == 'onoff') 
			{
				device.setCapabilityValue('measure_current', data.dps['18']/1000)
				.catch( err => {
				console.error(err);
				});
			}
			
			// verwerk parameter 19 measure power
			if(data.dps.hasOwnProperty('19') == true && type == 'onoff') 
			{
				device.setCapabilityValue('measure_power', data.dps['19']/10)
				.catch( err => {
				console.error(err);
				});
			}
			
			// verwerk parameter 20 voltage
			if(data.dps.hasOwnProperty('20') == true && type == 'onoff') 
			{
				device.setCapabilityValue('measure_voltage', data.dps['20']/10)
				.catch( err => {
				console.error(err);
				});
			}
	
		// RGB devices

			// verwerk onoff
			if(data.dps.hasOwnProperty('20') == true && type == 'RGB') 
			{
				device.setCapabilityValue('onoff', data.dps['20'])
				.catch( err => {
				console.error(err);
				});
			}
			
			// verwerk dim
			if(data.dps.hasOwnProperty('22') == true && type == 'RGB') 
			{
				device.setCapabilityValue('dim', data.dps['22']/1000)
				.catch( err => {
				console.error(err);
				});
			}

			// verwerk lightmode
			if(data.dps.hasOwnProperty('21') == true && type == 'RGB') 
			{
				if(data.dps['21'] == 'colour') 
					{
					this.devicelog('colormode:', 'color');	
					var mode = 'color';
					}
				else
					{
					this.devicelog('colormode:', 'temperature');	
					var mode = 'temperature';
					}
				device.setCapabilityValue('light_mode', mode)
				.catch( err => {
				console.error(err);
				});
			}
			
			// verwerk parameter 24 kleur
			if(data.dps.hasOwnProperty('24') == true && type == 'RGB') 
			{
				var colorstring = data.dps['24'];
				
				var huehex =  colorstring.substring(1,4);
				var sathex =  colorstring.substring(5,8);
				var dimhex =  colorstring.substring(9,12);
			
				var hue = parseInt(huehex, 16)/360;
				var sat = parseInt(sathex, 16)/1000;
				var dim = parseInt(dimhex, 16)/1000; 
			
				device.setCapabilityValue('light_hue', hue)
				.catch( err => {
				console.error(err);
				});
				
				device.setCapabilityValue('light_saturation', sat)
				.catch( err => {
				console.error(err);
				});
				
				device.setCapabilityValue('dim', dim)
				.catch( err => {
				console.error(err);
				});
			}
	},	
	
// Reconnect
reconnect: function (APIdevice, device)	{ 
	setTimeout(() =>  	{ 
			var state = device.getAvailable();
			this.devicelog('Status: ',state);
			
			if(state == false) 
				{
				//Find device on network
				APIdevice.find().then(() => {
				// Connect to device
				APIdevice.connect().catch( err => {
				console.error(err);
				});
				})
				.catch( err => {
				console.error(err);
				});
			}
			this.reconnect(APIdevice, device);
			}
	, 10000);
	}, 

// Send values function
sendvalues: function (device, APIdevice, value, parameter) {
		
		var onoff = device.getCapabilityValue('onoff');
		var dim = Math.round(device.getCapabilityValue('dim') * 1000);
		var light_hue = Math.round(device.getCapabilityValue('light_hue') * 360);
		var light_saturation = Math.round(device.getCapabilityValue('light_saturation') * 1000);
		var light_mode = device.getCapabilityValue('light_mode');
		
		var dimhex = this.decimalToHex(dim, 3);
		var huehex = this.decimalToHex(light_hue, 3);
		var sathex = this.decimalToHex(light_saturation, 3);
		
		var colorcode = ('0'+huehex+'0'+sathex+'0'+dimhex);
		
		if (parameter == 'onoff') 
		
		{
				return APIdevice.set({set: value})
				.catch( err => {
				console.error(err);
				});
		}		
		else if (parameter == 'dim' && light_mode == 'temperature')
		{
				this.devicelog('Device: ','zet wit dimmer');
				var dimvalue = value * 1000;
				this.devicelog('Device: ', 'dim to value');
				return APIdevice.set({dps: 22, set: dimvalue})
				.catch( err => {
				console.error(err);
				});	
		}
		else if (parameter == 'dim' && light_mode == 'color')
		{		
				var setvalue = Math.round(value * 1000); 
				var dimhex = this.decimalToHex(setvalue, 3);
				var colorcode = ('0'+huehex+'0'+sathex+'0'+dimhex);
				this.devicelog('colorcode set: ', colorcode);
				return APIdevice.set({
								multiple: true,
								data: {
									21: 'colour',
									24: colorcode,
									25: colorcode
								}})
				.catch( err => {
				console.error(err);
				});	
		}
		else if (parameter == 'hue')
		{		
				var setvalue = Math.round(value * 360); 
				var huehex = this.decimalToHex(setvalue, 3);
				var colorcode = ('0'+huehex+'0'+sathex+'0'+dimhex);
				this.devicelog('colorcode set: ', colorcode);
				return APIdevice.set({
								multiple: true,
								data: {
									21: 'colour',
									24: colorcode,
									25: colorcode
								}})
				.catch( err => {
				console.error(err);
				});	
		}
		else if (parameter == 'light_saturation')
		{		
				var setvalue = Math.round(value * 1000); 
				var sathex = this.decimalToHex(setvalue, 3);
				var colorcode = ('0'+huehex+'0'+sathex+'0'+dimhex);
				this.devicelog('colorcode set: ', colorcode);
				return APIdevice.set({
								multiple: true,
								data: {
									21: 'colour',
									24: colorcode,
									25: colorcode
								}})
				.catch( err => {
				console.error(err);
				});	
		}
		else if (parameter =='colormode')
		{
			if (value == 'temperature') 
							{
								return APIdevice.set({dps: 21, set: 'white'})
								.catch( err => {
								console.error(err);
								});
							}
			else 
				{
							return APIdevice.set({
										multiple: true,
										data: 	{
												21: 'colour',
												24: 'colorcode',
												25: 'colorcode'
												}
											}).catch( err => {console.error(err);});				
			}
		}
}
};

