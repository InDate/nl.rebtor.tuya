'use strict';
var logging = true;

module.exports = {

// Decimal to Hex converter 
decimalToHex: function (d, padding) {
    var hex = Number(d).toString(16);
    padding = typeof (padding) === "undefined" || padding === null ? padding = 2 : padding;

    while (hex.length < padding) {
        hex = "0" + hex;
    }

    return hex;
	},

// Logging
devicelog: function (title, log) 
	{
	if(logging == true) 
		{ 
		console.log(title, log);
		}
	},

// clearlog
clearlog: function(device)
	{
			device.setSettings(
				{
				DATAATLOG: '',
				})
			.catch( this.error )
	},
	
// processdata

processdata: function(device, data, type) 	
	{	// check if data is valid
			this.devicelog('typeof: ',typeof data);
			if(typeof data == 'object') 
			{
			// Form log entry	
				if(device.getSetting('DATAATLOG').length < 1500)
				{var logvalue = (device.getSetting('DATAATLOG') + '\n NEW DATA ATRIBUTE: ' + JSON.stringify(data))} 
				else
				{var logvalue = JSON.stringify(data)};
			// Write datalog to setting
				device.setSettings({
				  DATAATLOG: logvalue,
				})
				  .catch( this.error );
			
			// onoff devices

				// verwerk onoff
				if(data.dps.hasOwnProperty('1') == true && type == 'onoff') 
				{
					device.setCapabilityValue('onoff', data.dps['1'])
					.catch( err => {
					console.error(err);
					});
				}		
				
				// verwerk parameter 18 current
				if(data.dps.hasOwnProperty('18') == true && type == 'onoff') 
				{
					device.setCapabilityValue('measure_current', data.dps['18']/1000)
					.catch( err => {
					console.error(err);
					});
				}
				
				// verwerk parameter 19 measure power
				if(data.dps.hasOwnProperty('19') == true && type == 'onoff') 
				{
					device.setCapabilityValue('measure_power', data.dps['19']/10)
					.catch( err => {
					console.error(err);
					});
				}
				
				// verwerk parameter 20 voltage
				if(data.dps.hasOwnProperty('20') == true && type == 'onoff') 
				{
					device.setCapabilityValue('measure_voltage', data.dps['20']/10)
					.catch( err => {
					console.error(err);
					});
				}

			// multisocket devices

				
				// verwerk socket main
				if(type == 'mulsoc') 
				{
					var soc1 = device.getCapabilityValue('onoff.soc1');
					var soc2 = device.getCapabilityValue('onoff.soc2');
					var soc3 = device.getCapabilityValue('onoff.soc3');
					var soc4 = device.getCapabilityValue('onoff.soc4');
					var socusb = device.getCapabilityValue('onoff.socusb');

				// verwerk socket 1
				if(data.dps.hasOwnProperty('1') == true && type == 'mulsoc') 
				{
					var soc1 = data.dps['1'];
					device.setCapabilityValue('onoff.soc1', data.dps['1'])
					.catch( err => {
					console.error(err);
					});
					
					this._driver = device.getDriver();	
					
					if (data.dps['1'] == true)
						{
							this._driver.TriggerSoc1On( device, {}, {} );
						}
					else
						{
							this._driver.TriggerSoc1Off( device, {}, {} );
						}		
				}		
				
				// verwerk socket 2
				if(data.dps.hasOwnProperty('2') == true && type == 'mulsoc') 
				{
					var soc2 = data.dps['2'];
					device.setCapabilityValue('onoff.soc2', data.dps['2'])
					.catch( err => {
					console.error(err);
					});
					
					this._driver = device.getDriver();	
					
					if (data.dps['2'] == true)
						{
							this._driver.TriggerSoc2On( device, {}, {} );
						}
					else
						{
							this._driver.TriggerSoc2Off( device, {}, {} );
						}	
				
				}
				
				// verwerk socket 3
				if(data.dps.hasOwnProperty('3') == true && type == 'mulsoc') 
				{
					var soc3 = data.dps['3'];
					device.setCapabilityValue('onoff.soc3', data.dps['3'])
					.catch( err => {
					console.error(err);
					});
					
					this._driver = device.getDriver();	
					
					if (data.dps['3'] == true)
						{
							this._driver.TriggerSoc3On( device, {}, {} );
						}
					else
						{
							this._driver.TriggerSoc3Off( device, {}, {} );
						}	
				}
				
				// verwerk socket 4
				if(data.dps.hasOwnProperty('4') == true && type == 'mulsoc') 
				{
					var soc4 = data.dps['4'];
					device.setCapabilityValue('onoff.soc4', data.dps['4'])
					.catch( err => {
					console.error(err);
					});
					
					this._driver = device.getDriver();	
					
					if (data.dps['4'] == true)
						{
							this._driver.TriggerSoc4On( device, {}, {} );
						}
					else
						{
							this._driver.TriggerSoc4Off( device, {}, {} );
						}	
				}
				
				// verwerk socket usb
				if(data.dps.hasOwnProperty('7') == true && type == 'mulsoc') 
				{
					var socusb = data.dps['7'];
					device.setCapabilityValue('onoff.socusb', data.dps['7'])
					.catch( err => {
					console.error(err);
					});
					
					this._driver = device.getDriver();	
					
					if (data.dps['7'] == true)
						{
							this._driver.TriggerSocusbOn( device, {}, {} );
						}
					else
						{
							this._driver.TriggerSocusbOff( device, {}, {} );
						}	
					
				}
				
				if(soc1 == false && soc2 == false && soc3 == false && soc4 == false && socusb == false)
					{var total_value = false;}
				else
					{var total_value = true;}
				device.setCapabilityValue('onoff', total_value)
				.catch( err => {
				console.error(err);
				});
				}
				
			// Filament devices

				// verwerk onoff
				if(data.dps.hasOwnProperty('1') == true && type == 'Filament') 
				{
					device.setCapabilityValue('onoff', data.dps['1'])
					.catch( err => {
					console.error(err);
					});
				}
				
				// verwerk dim
				if(data.dps.hasOwnProperty('2') == true && type == 'Filament') 
				{
					device.setCapabilityValue('dim', data.dps['2']/255)
					.catch( err => {
					console.error(err);
					});
				}
				
				// verwerk temperature
				if(data.dps.hasOwnProperty('3') == true && type == 'Filament') 
				{
					device.setCapabilityValue('light_temperature', 1 - (data.dps['3']/255))
					.catch( err => {
					console.error(err);
					});
				}
	
			// RGB devices

				// verwerk onoff
				if(data.dps.hasOwnProperty('20') == true && type == 'RGB') 
				{
					device.setCapabilityValue('onoff', data.dps['20'])
					.catch( err => {
					console.error(err);
					});
				}
				
				// verwerk dim
				if(data.dps.hasOwnProperty('22') == true && type == 'RGB') 
				{
					device.setCapabilityValue('dim', data.dps['22']/1000)
					.catch( err => {
					console.error(err);
					});
				}

				// verwerk lightmode
				if(data.dps.hasOwnProperty('21') == true && type == 'RGB') 
				{
					if(data.dps['21'] == 'colour') 
						{
						this.devicelog('colormode:', 'color');	
						var mode = 'color';
						}
					else
						{
						this.devicelog('colormode:', 'temperature');	
						var mode = 'temperature';
						}
					device.setCapabilityValue('light_mode', mode)
					.catch( err => {
					console.error(err);
					});
				}
				
				// verwerk parameter 24 kleur
				if(data.dps.hasOwnProperty('24') == true && type == 'RGB') 
				{
					var colorstring = data.dps['24'];
					
					var huehex =  colorstring.substring(1,4);
					var sathex =  colorstring.substring(5,8);
					var dimhex =  colorstring.substring(9,12);
				
					var hue = parseInt(huehex, 16)/360;
					var sat = parseInt(sathex, 16)/1000;
					var dim = parseInt(dimhex, 16)/1000; 
				
					device.setCapabilityValue('light_hue', hue)
					.catch( err => {
					console.error(err);
					});
					
					device.setCapabilityValue('light_saturation', sat)
					.catch( err => {
					console.error(err);
					});
					
					device.setCapabilityValue('dim', dim)
					.catch( err => {
					console.error(err);
					});
				}
			}
	},	
	
// Reconnect
reconnect: function (APIdevice, device)	{ 
	setTimeout(() =>  	{ 
			var state = device.getAvailable();
			this.devicelog('Status: ',state);
			
			if(state == false) 
				{
				//Find device on network
				APIdevice.find().then(() => {
				// Connect to device
				APIdevice.connect().catch( err => {
				console.error(err);
				});
				})
				.catch( err => {
				console.error(err);
				});
			}
			this.reconnect(APIdevice, device);
			}
	, 10000);
	}, 

// Send values function
sendvalues: function (device, APIdevice, value, parameter) {
		
		var onoff = device.getCapabilityValue('onoff');
		var dim = Math.round(device.getCapabilityValue('dim') * 1000);
		var light_hue = Math.round(device.getCapabilityValue('light_hue') * 360);
		var light_saturation = Math.round(device.getCapabilityValue('light_saturation') * 1000);
		var light_mode = device.getCapabilityValue('light_mode');
		
		var dimhex = this.decimalToHex(dim, 3);
		var huehex = this.decimalToHex(light_hue, 3);
		var sathex = this.decimalToHex(light_saturation, 3);
		
		var colorcode = ('0'+huehex+'0'+sathex+'0'+dimhex);
		
		if (parameter == 'onoff') 
		{
				return APIdevice.set({set: value})
				.catch( err => {
				console.error(err);
				});
		}
		else if (parameter == 'light_temperature') 
		{
				var tempvalue = Math.round(255 - (value * 255));
				this.devicelog('Device: temp to ', tempvalue);
				return APIdevice.set({dps: 3, set: tempvalue})
				.catch( err => {
				console.error(err);
				});	
		}
		else if (parameter == 'dim2') 
		{
				var dimvalue = Math.round(value * 255);
				this.devicelog('Device: dim to ', dimvalue);
				return APIdevice.set({dps: 2, set: dimvalue})
				.catch( err => {
				console.error(err);
				});	
		}	
		else if (parameter == 'dim' && light_mode == 'temperature')
		{
				this.devicelog('Device: ','zet wit dimmer');
				var dimvalue = value * 1000;
				this.devicelog('Device: ', 'dim to value');
				return APIdevice.set({dps: 22, set: dimvalue})
				.catch( err => {
				console.error(err);
				});	
		}
		else if (parameter == 'dim' && light_mode == 'color')
		{		
				var setvalue = Math.round(value * 1000); 
				var dimhex = this.decimalToHex(setvalue, 3);
				var colorcode = ('0'+huehex+'0'+sathex+'0'+dimhex);
				this.devicelog('colorcode set: ', colorcode);
				return APIdevice.set({
								multiple: true,
								data: {
									21: 'colour',
									24: colorcode,
									25: colorcode
								}})
				.catch( err => {
				console.error(err);
				});	
		}
		else if (parameter == 'hue')
		{		
				var setvalue = Math.round(value * 360); 
				var huehex = this.decimalToHex(setvalue, 3);
				var colorcode = ('0'+huehex+'0'+sathex+'0'+dimhex);
				this.devicelog('colorcode set: ', colorcode);
				return APIdevice.set({
								multiple: true,
								data: {
									21: 'colour',
									24: colorcode,
									25: colorcode
								}})
				.catch( err => {
				console.error(err);
				});	
		}
		else if (parameter == 'light_saturation')
		{		
				var setvalue = Math.round(value * 1000); 
				var sathex = this.decimalToHex(setvalue, 3);
				var colorcode = ('0'+huehex+'0'+sathex+'0'+dimhex);
				this.devicelog('colorcode set: ', colorcode);
				return APIdevice.set({
								multiple: true,
								data: {
									21: 'colour',
									24: colorcode,
									25: colorcode
								}})
				.catch( err => {
				console.error(err);
				});	
		}
		else if (parameter =='colormode')
		{
			if (value == 'temperature') 
							{
								return APIdevice.set({dps: 21, set: 'white'})
								.catch( err => {
								console.error(err);
								});
							}
			else 
				{
							return APIdevice.set({
										multiple: true,
										data: 	{
												21: 'colour',
												24: 'colorcode',
												25: 'colorcode'
												}
											}).catch( err => {console.error(err);});				
			}
		}
		else if (parameter == 'mulsoc') 
		{
			return APIdevice.set({
								multiple: true,
								data: 	{
								1: value,
								2: value,
								3: value,
								4: value,
								7: value
								}
			}).catch( err => {console.error(err);});	
		}
		else if (parameter == 'mulsoc1') 
		{
				let currentValueSoc1 = device.getCapabilityValue('onoff.Soc1');
				return APIdevice.set({dps: 1, set: value})
				.catch( err => {
				console.error(err);
				});	
	
				if (value == true)
					{
						
				this._driver = device.getDriver();
				this._driver.TriggerSoc1On( device, {}, {} );
					}
				else
					{
				this._driver = device.getDriver();
				this._driver.TriggerSoc1Off( device, {}, {} );
					}	
				
		}
		else if (parameter == 'mulsoc2') 
		{
				let currentValueSoc2 = device.getCapabilityValue('onoff.Soc2');
			
				return APIdevice.set({dps: 2, set: value})
				.catch( err => {
				console.error(err);
				});	
				
			
		}
		else if (parameter == 'mulsoc3') 
		{
				let currentValueSoc3 = device.getCapabilityValue('onoff.Soc3');
				
				return APIdevice.set({dps: 3, set: value})
				.catch( err => {
				console.error(err);
				});	
				
			
				
		}
		else if (parameter == 'mulsoc4') 
		{
				let currentValueSoc4 = device.getCapabilityValue('onoff.Soc4');
				
				return APIdevice.set({dps: 4, set: value})
				.catch( err => {
				console.error(err);
				});	

		
				
		}
		else if (parameter == 'mulsocusb') 
		{
				let currentValueSocusb = device.getCapabilityValue('onoff.Socusb');
				
				return APIdevice.set({dps: 7, set: value})
				.catch( err => {
				console.error(err);
				});	
				

		}		
}
};

